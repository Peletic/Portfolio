---
interface props {
    images: String[],
    captions: String[]
}
const {images, captions} = Astro.props
---
<div id="slideshowwrapper" class="w-full h-fit">
    <div class="child slideshow w-full z-0">
        {[...images].map((e, i) => {
            return (
                    <div class="slide fade w-full h-full">
                        <img src={e} style="width:100%">
                        <div class="text">{captions[i]}</div>
                    </div>
            )
        })}
        <a class="prev" id="psd">&#10094;</a>
        <a class="next" id="psu">&#10095;</a>
    </div>
    <div class="child z-30 w-full h-fit justify-self-end flex self-end text-center">
        {[...images].map(i => {
            return (<span class="dot"/>)
        })}
    </div>
</div>

<script>
    document.getElementById("psd").addEventListener("click", e => plusSlides(-1))
    document.getElementById("psu").addEventListener("click", e => plusSlides(1))

    let slideIndex = 1;
    showSlides(slideIndex);

    // Next/previous controls
    function plusSlides(n) {
        showSlides(slideIndex += n);
    }

    // Thumbnail image controls
    function currentSlide(n) {
        showSlides(slideIndex = n);
    }

    function showSlides(n) {
        let i;
        let slides = document.getElementsByClassName("slide");
        let dots = document.getElementsByClassName("dot");
        console.log(slides.length)
        if (n > slides.length) {
            slideIndex = 1
        }
        if (n < 1) {
            slideIndex = slides.length
        }
        for (i = 0; i < slides.length; i++) {
            slides[i].style.display = "none";
            console.log("hiding slide" + i)
        }
        for (i = 0; i < dots.length; i++) {
            dots[i].className = dots[i].className.replace(" active", "");
        }
        slides[slideIndex - 1].style.display = "block";
        dots[slideIndex - 1].className += " active";
    }
</script>
<style>

    #slideshowwrapper {
        display: grid;
        grid-template-rows: 100%;
        grid-template-columns: 100%;
    }

    #slideshowwrapper .child {
        display: block;
        grid-row: 1;
        grid-column: 1;
    }

    * {
        box-sizing: border-box
    }

    /* Slideshow container */
    .slideshow {
        max-width: 1000px;
        position: relative;
        margin: auto;
    }

    /* Hide the images by default */
    .slide {
        display: none;
    }

    /* Next & previous buttons */
    .prev, .next {
        cursor: pointer;
        position: absolute;
        top: 50%;
        width: auto;
        margin-top: -22px;
        padding: 16px;
        color: white;
        font-weight: bold;
        font-size: 18px;
        transition: 0.6s ease;
        border-radius: 0 3px 3px 0;
        user-select: none;
    }

    /* Position the "next button" to the right */
    .next {
        right: 0;
        border-radius: 3px 0 0 3px;
    }

    /* On hover, add a black background color with a little bit see-through */
    .prev:hover, .next:hover {
        background-color: rgba(0, 0, 0, 0.8);
    }

    /* Caption text */
    .text {
        color: #f2f2f2;
        font-size: 15px;
        padding: 8px 12px;
        position: absolute;
        bottom: 8px;
        width: 100%;
        text-align: center;
    }

    /* Number text (1/3 etc) */
    .numbertext {
        color: #f2f2f2;
        font-size: 12px;
        padding: 8px 12px;
        position: absolute;
        top: 0;
    }

    /* The dots/bullets/indicators */
    .dot {
        width: 15px;
        background-color: #bbb;
        border-radius: 50%;
        display: inline-block;

        transition: background-color 0.6s ease;

        height: 15px;
    }

    .active, .dot:hover {
        background-color: #717171;
    }

    /* Fading animation */
    .fade {
        animation-name: fade;
        animation-duration: 1.5s;
    }

    @keyframes fade {
        from {
            opacity: .4
        }
        to {
            opacity: 1
        }
    }
</style>