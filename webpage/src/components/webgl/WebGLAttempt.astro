---


---
<div>

</div>
<!--

<script>
    import * as THREE from 'three';
    import {GLTFLoader} from "three/examples/jsm/loaders/GLTFLoader";

    const loader = new GLTFLoader();
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
    const renderer = new THREE.WebGLRenderer();
    import glbReference from "../fire.glb"
    import {MapControls} from "three/examples/jsm/controls/MapControls";
    import {AsciiEffect} from "three/examples/jsm/effects/AsciiEffect";

    renderer.setSize( window.innerWidth, window.innerHeight );
    document.body.appendChild( renderer.domElement );
    console.log(glbReference)
    loader.load( <string>glbReference, function (gltf ) {

        scene.add( gltf.scene );

    }, undefined, function ( error ) {

        console.error( error );

    } );
    camera.position.z = 5;
    const light = new THREE.AmbientLight( 0x404040, 20 ); // soft white light
    scene.add( light );
    let controls = new MapControls( camera, renderer.domElement );

    //controls.addEventListener( 'change', render ); // call this only in static scenes (i.e., if there is no animation loop)

    controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled
    controls.dampingFactor = 0.05;

    controls.screenSpacePanning = false;

    controls.minDistance = 0;
    controls.maxDistance = 20;

    controls.maxPolarAngle = Math.PI / 2;

    let effect = new AsciiEffect(renderer)
    effect.setSize(500, 500)
    function animate() {


        requestAnimationFrame( animate );
        effect.render(scene, camera)
    }

    animate();
</script>-->
<script>

    import * as THREE from 'three';

    import { AsciiEffect } from '../effects/AsciiEffect.js';
    import { TrackballControls } from '../effects/TrackballControls.js';
    import glbReference from "../fire.glb"
    import {GLTFLoader} from "three/examples/jsm/loaders/GLTFLoader";

    let camera, controls, scene, renderer, effect;

    let sphere, plane;

    const loader = new GLTFLoader();
    const start = Date.now();

    init();
    animate();

    function init() {

        camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 1, 1000 );
        camera.position.y = 150;
        camera.position.z = 500;

        scene = new THREE.Scene();
        scene.background = new THREE.Color( 0, 0, 0 );

        const pointLight1 = new THREE.PointLight( 0xffffff, 3, 0, 0 );
        pointLight1.position.set( 500, 500, 500 );
        scene.add( pointLight1 );

        const pointLight2 = new THREE.PointLight( 0xffffff, 1, 0, 0 );
        pointLight2.position.set( - 500, - 500, - 500 );
        scene.add( pointLight2 );

        sphere = new THREE.Mesh( new THREE.SphereGeometry( 200, 20, 10 ), new THREE.MeshPhongMaterial( { flatShading: true } ) );
        //scene.add( sphere );

        loader.load(<string>glbReference, function (gltf ) {

            scene.add( gltf.scene );

        }, undefined, function ( error ) {

            console.error( error );

        } );

        const light = new THREE.AmbientLight( 0x404040, 20 ); // soft white light
        scene.add( light );

        // Plane

        plane = new THREE.Mesh( new THREE.PlaneGeometry( 400, 400 ), new THREE.MeshBasicMaterial( { color: 0xe0e0e0 } ) );
        plane.position.y = - 200;
        plane.rotation.x = - Math.PI / 2;
        scene.add( plane );

        renderer = new THREE.WebGLRenderer();
        renderer.setSize( window.innerWidth, window.innerHeight );

        effect = new AsciiEffect( renderer, ' .:-+*=%#O0|@', { invert: true, strResolution: "high"} );
        effect.setSize( window.innerWidth, window.innerHeight );
        effect.domElement.style.color = 'white';
        effect.domElement.style.backgroundColor = 'black';

        document.body.appendChild( effect.domElement );

        controls = new TrackballControls( camera, effect.domElement );

        window.addEventListener( 'resize', onWindowResize );



    }

    function onWindowResize() {

        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize( window.innerWidth, window.innerHeight );
        effect.setSize( window.innerWidth, window.innerHeight );

    }

    //

    function animate() {

        requestAnimationFrame( animate );

        render();

    }

    function render() {

        const timer = Date.now() - start;

        sphere.position.y = Math.abs( Math.sin( timer * 0.002 ) ) * 150;
        sphere.rotation.x = timer * 0.0003;
        sphere.rotation.z = timer * 0.0002;

        controls.update();

        effect.render( scene, camera );

    }

</script>